#lang racket
;1
(define (square a) (* a a))
(square 4)
(define (rectangle a b) (* a b))
(rectangle 4 5)
(define (circle r) (* r r 3.14))
(circle 3)
(define ( triangle a h) (/(* a h) 2))
( triangle 2 4)
(define ( ball r) (/(* 3.14 4 r r r) 3))
(ball 3)
(define ( cube a) (* a a a))
(cube 2)
;2
(define (shapecalc sname  prmlst)
  (if(list? prmlst)
  (cond ((and (string=? sname "square")(= 1 (length prmlst)) (number? (car prmlst))) (square (car prmlst)))
        ((and (string=? sname "rectangle") (= 2 (length prmlst)) (number? (car prmlst))) (rectangle (car prmlst)))
        ((and (string=? sname "circle") (= 1 (length prmlst)) (number? (car prmlst))) (circle (car prmlst)))
        ((and (string=? sname "triangle") (= 2 (length prmlst)) (number? (car prmlst))) (triangle (car prmlst)))
        ((and (string=? sname "ball") (= 1 (length prmlst)) (number? (car prmlst))) (ball (car prmlst)))
        ((and(string=? sname "cube") (= 1 (length prmlst)) (number? (car prmlst))) (cube (car prmlst)))
      (else '())
      )
  '()
  )
  )
;3
(shapecalc "square" '(4 5))
(define (ballcubediff r) (list (ball r) (cube (* r (sqrt 2))) (- (ball r) (cube (* r (sqrt 2))))))
(ballcubediff 5)
(define (cubeballdiff r) (list (ball r) (cube (* r (sqrt 2))) (-  (cube (* r  2))(ball r))))
(cubeballdiff 5)
